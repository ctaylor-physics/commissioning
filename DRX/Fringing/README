DRX Commissioning Scripts - Fringing
====================================

fringeSets.py
-------------
Read in SSMIF file and create a set of DRX gain files (zero-delay for dipoles-only) 
that puts a single dipole or beam on the X pol and the outlier on the other.  The 
gain files are constructed such that all data is from X pol.

fringeSDF.py
------------
SDF-generating version of fringeSets.py.

fringeDipole.py
---------------
Script to fringe DRX files that have one dipole on X pol. and another dipole (the
outlier probably) on Y pol.  Accepts three command line arguments:  
 1) stand number on X pol.
 2) stand number on Y pol.
 3) DRX filename(s)
At the end of the correlation, the visibilities are written to a NPZ file.

fringeBeam.py
-------------
Similar to fringeDipole.py, but expects the beam to be on X pol. and the dipole on
Y pol.  Accepts two command line arguments:
 1) stand number on Y pol.
 2) DRX filename(s)

fringeBeamHDF.py
----------------
Similar to fringeBeam.py, but the output is written to a single HDF5 file.  Accepts
two command line arguments:
 1) stand number on Y pol.
 2) DRX filename(s)

plotFringes.py
--------------
Simple script to load in a collection of NPZ files generated by fringeDipole.py/
fringeBeam.py and plot the visibility amplitude over time.

plotFringes2.py
---------------
Similar to plotFringes.py but displays a waterfall of the visibility and includes the
integrated bandpass.

simulateFringesBright.py
------------------------
Given a collection of NPZ files generated by fringeDipole.py, simulate the fringes using 
the lsl.sim.vis.buildSimData() function and the bright sources listed in lsl.sim.vis.srcs.

