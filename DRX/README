DRX Commissioning Scripts
=========================

gain.py
-------
JPL-created script for creating gain files to be used by DRX.

delay.py
--------
JPL-create script for created delay files to be used by DRX.

test_analog_in2.py
------------------
Script for setting up a test DRX observation with a variety of tuning, frequency, 
bandwidth, and gain settings.  Needs gain.py and delay.py to work.

generateDelays.py
-----------------
Generate gain and delay files for a particular topocentric pointing (azimuth and 
elevation in degrees) at a specified frequency.

.. note::
	genernateDelays.py generates text files for gains and delays that need to
	be converted to binary packed files with the MCS/Executive commands megfg 
	and medfg.

checkTimetags.py
----------------
Simple script to check the time tag sequence in a DRX file and look for strange 
jumps and other badness.  It can also be used to check the DRX decimate (sample 
rate) field and if the time has been set correctly on the various boards.

getTuningOffset.py
-------------------
Check for an offset in the time tags associated with the two tunings beyond what is
controlled by the time offset stored in the frame header.  This should read in the 
first complete set of frame from all four beamtunepols and compare tunings 1 and 2.  
Any differences between the times are noted.

drxTimeseries.py
----------------
Script for plotting time series data from a DRX file.  This file is also available 
as part of the LSL package (version >= 0.4.0) but is included here since this is 
the script we actually used at JPL for pre-acceptance testing.

drxSpectra.py
-------------
Script for reading in DRX data and created time-averaged power spectral density 
plots.  Like drxTimeseries.py, this file is also available as part of the LSL 
package (version >= 0.4.0) but is included here since this is the script we actually 
used at JPL for pre-acceptance testing.

eyeDiagram.py
-------------
Create an eye diagram for some portion of a DRX file.

eyeDiagram2.py
--------------
Look for glitches in a DRX file by fitting a quantized sine wave to the data.

